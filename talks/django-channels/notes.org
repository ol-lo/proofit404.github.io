* What is a channel?
  It is an ordered, first-in first-out queue with message expiry and
  at-most-once delivery to only one listener at a time.
* he real need for a system like this - persistent state for connections
* Remember, Channels is network-transparent and can run on multiple workers, so you canâ€™t just store things locally in global variables or similar.
* groups are mostly for reply channels
* HTTP/2 server push
* long polling
* delivery once
* crappy rabbitmq realization using kombu and threads
* minimum added latency
* message handler is a simple function
  It's not a good way to write async code.  If we start processing
  response how we stop processing response if we wait for another
  system?  Multiple handlers?  Looks like twisted callbacks.
* software stack problem
  and how asyncio solves this
* redis transport implementation details
* alternatives
* celery / rq / asgi protocols comparison
* mention we can respond to http1.1 with asgi
* mention the is layers routing similar to DB router
* show runserver difference with and without channels app enabled
* does wsgi middlewares still works with daphne's runserver?
* trace request life circle with pdb
  if we don't have http.request consumer, how life circle changes?
* Routing implementation details
  - What is the source of the path keyword value?
* client side websocket routing?
* hardcoded channels' and groups' names are design problems
* does daphne use twisted friendly async libraries?
* for what the hell runworker in the debugging mode serves static files
* how channels_session decorator is implemented?
* how to multiplex multiple chat rooms in one websocket?
* substitute failed workers since daphne doesn't drop connections on error
* how to propagate exceptions in the channel handler to the client?
* cookies in websocket?
* http_session decorator
  How it's implemented?
* why we need to send ?session_key in the websocket url
* How websocket protocol work and in what stages worker get the message?
* Enforce order
  - Why is it necessary?
  - How it works?
* Describe community projects
