doctype html
html
  head
    meta(charset='utf-8')
    link(rel='stylesheet' type='text/css' href='css/reveal.css')
    link(rel='stylesheet' type='text/css' href='css/theme/serif.css')
    link(rel='stylesheet' type='text/css' href='lib/css/github-gist.min.css')
    link(rel='stylesheet' type='text/css' href='css/customize.css')
    title The Right Bees
    script.
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
  body
    .reveal
      .slides
        section
          img(src='pic/brutus-270.png')
          h2 The Right Bees
          h3 Artem Malyshev
          h4 @proofit404
        section(data-background-color='#FFFFFF')
          img(src='pic/django-channels.png')
        section
          img.face-photo.photo-corner(src='pic/Russell.jpg')
        section
          .container
            div
              img(src='pic/bugjar-logo.png')
            div
              h6 Bugjar
          .container
            div
              img(src='pic/cricket-logo.png')
            div
              h6 Cricket
          .container
            div
              img(src='pic/duvet-logo.png')
            div
              h6 Duvet
          .container
            div
              img(src='pic/galley-logo.png')
            div
              h6 Galley
        section(data-background='pic/bugjar.png' data-background-size='contain')
          br
        section(data-background='pic/cricket.png' data-background-size='contain')
          br
        section(data-background='pic/duvet.png' data-background-size='contain')
          br
        section(data-background='pic/galley.png' data-background-size='contain')
          br
        section(data-background='pic/blood-tears.jpg' data-background-size='contain')
          br
        section
          .container
            div
              img(src='pic/toga-logo.png')
            div
              h6 Toga
          .container
            div
              img(src='pic/rubicon-logo.png')
            div
              h6 Rubicon
          .container
            div
              img(src='pic/voc-logo.png')
            div
              h6 Voc
          .container
            div
              img(src='pic/brutus-270.png')
            div
              h6 Batavia
        section
          h1 Toga
        section
          h4 One button app
          pre
            code.hljs.python.
              def button_handler(widget):
                  print("hello")

              def build(app):
                  box = toga.Box()
                  button = toga.Button('Hello world', on_press=button_handler)
                  button.style.set(margin=50)
                  box.add(button)
                  return box

              app = toga.App('Try App', 'org.proofit404', startup=build)
              app.main_loop()
        section
          img(src='pic/First-App.png')
        section
          h4 Platforms
          ul
            li toga-gtk, toga-cocoa, toga-win32
            li environment markers
            li import hooks
            li platform bootstrap
        section
          h4 Colosseum
          pre
            code.hljs.python.
              from colosseum import CSS, ROW
              style = CSS(width=1000, height=1000, flex_direction=ROW)
              style.layout
          h4 Interface
          ul
            li foo.parent
            li foo.children
            li foo.style
        section
          h4 Problems
          ul
            li Hand written hierarchy
            li Inline CSS
        section
          h4 index.jade
          pre
            code.hljs.pug.
              Box
                Button(label="Hello world", style="margin: 50",
                       on_press=button_handler)
          h4 app.py
          pre
            code.hljs.python.
              import colosseum
              import pyjade
              import toga

              index = open('index.jade').read()
              ast = pyjade.Parser(index).parse()

              def build(nodes, parent=None):
                  ...
              app = toga.App('App Jade', 'org.proofit404', startup=build())
        section
          h3 Apple Python Support
          h5 Create XCode Framework from Python distribution
        section
          h1 Rubicon
        section
          h4 Objective-C
          pre
            code.hljs.objc.
              NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
          h4 Pure C
          pre
            code.hljs.c.
              #include #{"<"}CoreFoundation/CoreFoundation.h#{">"}
              #include #{"<"}objc/runtime.h#{">"}
              #include #{"<"}objc/message.h#{">"}

              id pool = objc_msgSend(
                  objc_msgSend(
                      objc_getClass("NSAutoreleasePool"),
                      sel_registerName("alloc")),
                  sel_registerName("init"));
        section
          h4 Pure Python
          pre
            code.hljs.python.
              from rubicon.objc import ObjCClass, objc_method

              NSAutoreleasePool = ObjCClass("NSAutoreleasePool")

              pool = NSAutoreleasePool.alloc().init()

              class MyPool(NSAutoreleasePool):
                  @objc_method
                  def foo(self, bar: int) -#{">"} None:
                      pass
        section
          h4 Implementation
          ul
            li Use ctypes to talk with FFI
            li Used in toga-cocoa and toga-ios
            li Can expose python methods to the Obj-C runtime
        section
          h1 Voc
        section
          h1 Batavia
        section
          h2 Python all the things!
        section
          h2 pybee.org
        section
          h1 ?
    script(src='lib/js/head.min.js')
    script(src='js/reveal.js')
    script(src='lib/js/highlight.min.js')
    script.
      hljs.initHighlightingOnLoad();
    script.
      Reveal.initialize({
          controls: false,
          progress: false,
          slideNumber: true,
          history: true,
          transition: 'none',
          dependencies: [
              { src: 'plugin/notes/notes.js', async: true }
          ]
      });
//- Local Variables:
//- eval: (add-hook (quote after-save-hook) (function (lambda nil (let ((proc (start-process-shell-command "pug" "*Pug*" (format "pug %s" (buffer-file-name))))) (set-process-sentinel proc (function (lambda (proc status) (if (zerop (process-exit-status proc)) (and (buffer-file-name) (message "Pug: rendered %s" (file-name-nondirectory (buffer-file-name)))) (message "Pug: error")))))))) nil t)
//- eval: (start-process-shell-command "http.server" "*http.server*" "python -m http.server --bind localhost 4000")
//- eval: (run-at-time 2 nil (function browse-url) "http://localhost:4000")
//- End:
