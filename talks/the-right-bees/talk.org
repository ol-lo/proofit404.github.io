* Batavia
** DONE How webpack module.export = '<base64>' corresponds here?
   Some stdlib module packed into batavia.js directly.  When
   javascript require('./stdlib/this') executed, module bytecode
   base64 string will be a result of this evaluation.
** DONE How import system was implemented?
   In the batavia we have virtual machine loader and byte_IMPORT_NAME
   methods.  The first one uses dom element search to find script tags
   containing python bytecode on the page.  The second one is
   triggered by VM when process python bytecode import statement.  It
   tries to get modules object[module name].  If this operation was
   successful it decode base64 and return new frame.  If no, it tries
   to do the same with stdlib object.  If failed, it calls loader.
** DONE Is it necessary to write python bytecode inside script tags?
   You can use any element tag.  The only requirement with default
   loader is that element id must have
   'batavia-package.module.submodule' form.
** DONE webpack vm loader and hot reload?
   See custom loader in the pyxl example and generated stdlib.js with
   new compile_stdlib module.
** DONE React?
   Python has pyxl library.  It works before bytecode compiler stage
   when codecs applies.  So we only need pyxl.html library bundled to
   run in browser.  At this demo we use stripped version, because
   original one requires re library which depends on C implementation.
** DONE How threading was implemented?
   Looks like it's the biggest project TODO.
** DONE How virtual machine is implemented?
   We have javascript marshal library, which can read pyc byte string
   into types defined in JavaScript.  This done with recursive
   function and huge switch statement.  Then VM create Frame object
   from this Code object.  This frame object operation function is
   *applied* with VM instance as function *this*.  It calculates frame
   opcodes until they ends or error occurs.  Opcodes mapped to the VM
   methods or calculated inplace.
** DONE How objects and dictionaries are implemented?
   Python objects presented as plain JavaScript objects.  They have
   __dict__ property contains Dict JavaScript object.  Dict dunder
   methods like __lt__ are regular javascript methods stored in the
   Dict prototype.  In function objects __call__ property is present.
   It contains anonymous function which can inspect python arguments
   and run given frame in the VM.  Method objects contain __call__
   property with anonymous function which wraps Function and pass
   instance object as first argument.  Static methods are not
   implemented.
