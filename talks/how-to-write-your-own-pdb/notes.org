* TODO Main implementation principle
** set_trace implementation
*** what does "frame.f_trace = self.trace_dispatch" mean?
*** sys.settrace implementation
* TODO How commands were implemented
** How "next" command works?
** How "until" command works?
** How "return" command works?
** How "list" command works?
** How "w" command works?
   self.get_stack walks from current frame by link f.f_back collecting
   all frames up until bottom frame.
** How "continue" to next breakpoint works
   If there is no breakpoints any more "set_continue" just call
   sys.settrace(None) which means normal execution.
* TODO What is linecache module?
* TODO What is postmortem?
** Does it operate on traceback somehow?
** Does it work if traceback was affected like in Jinja2
* TODO How generators and coroutines go inside?
** tornado "yield" example
** asyncio "yield from" and "await" example
* Style notes
** We form this as XKCD styled story
** With each chapter our character becomes older and beardy
** Moral
   At the beginning of the story our young programmer without debugger
   was derided by old beardy C programmer, how have Gdb.  At the last
   slide our grown up old Python programmer comes to the next <no name
   lang> programmer to show how cool Pdb is and this fresh <no name
   lang> isn't cool because of missed debugger.
* TODO How to work with Threads and multiprocessing?
* TODO How inspect module is used here?
** How inspect.findsource works?
* TODO What is about ": " prompt?
