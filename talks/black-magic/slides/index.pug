doctype html
html
  head
    meta(charset='utf-8')
    link(rel='stylesheet' type='text/css' href='css/reveal.css')
    link(rel='stylesheet' type='text/css' href='css/theme/white.css')
    link(rel='stylesheet' type='text/css' href='lib/css/github-gist.css')
    //- link(rel='stylesheet' type='text/css' href='css/customize.css')
    title Black Magic for Good Fairies
    script.
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
  body
    .reveal
      .slides
        section
          h1 Black Magic for Good Fairies
          h3 @proofit404
        section
          h1 Python for Humans
          aside.notes.
            Whant to see how it was builded
        section
          h1 ORLY?
          aside.notes.
            Fucking madness...
        section
          h1 Q
        section
          pre
            code.hljs.shell.
              tailf /tmp/q
          pre
            code.hljs.shell.
              0.0s test: prefix + q(sep or '')=' '
              0.0s test: 'xxx'
              0.0s test: 'xxx '
              0.0s foo('xxx')
              0.0s -> 'xxx!!!'
          aside.notes
            | Print:
            ul
              li expression results
              li variable values
              li function arguments
              li function return values
        section
          pre
            code.hljs.python.
              import q
              write(prefix + q(sep or ''))
              write(q/prefix + (sep or ''))
              write(q|prefix + (sep or ''))

              @q
              def foo(bar): ...
          aside.notes
            | We can:
            ul
              li call modules
              li divide modules
              li compare modules
        section
          h2 How the hell?
          pre
            code.hljs.python.
              class Q(object):
                  import inspect
                  def __truediv__(self, arg):
                      info = self.inspect.getframeinfo(...
                      self.show(info.function, [arg])
                      return arg

              sys.modules['q'] = Q()
          aside.notes
            | Attention :
            ul
              li module cache is an object
              li GC will kill global imports
        section
          h1 Logging
        section
          h2 Function context
          pre
            code.hljs.python.
              def my_func():
                  logger.info('We are here')
          h2 console
          pre
            code.hljs.shell.
              INFO:my_func:We are here
          aside.notes
            | Function name in the output
            br
            | but we did not pass it
        section
          h2 Search who calls you
          pre
            code.hljs.python.
              def get_caller():
                  f = sys._getframe()
                  while hasattr(f, 'f_code'):
                      filename = f.f_code.co_filename
                      if filename == __file__:
                          f = f.f_back
                          continue
                      return f.f_code.co_name
        section
          h1 builtins
        section
          h2 change call signature
          pre
            code.hljs.python.
              class Foo:
                  @classmethod
                  def bar(cls):
                      ...
          aside.notes.
            We can write our own classmethod
        section
          h2 What is classmethod definition
          pre
            code.hljs.python.
              def classmethod(f):
                  F = StaticMethodDescriptor(f)
                  return F
        section
          h2 descriptors
          pre
            code.hljs.python.
              class StaticMethodDescriptor:
                  def __init__(self, f):
                      self.f = f
                  def __get__(self, obj, cls=None):
                      f = self.__dict__['f']
                      return partial(f, cls)

              Foo.bar
              F.__get__(None, Foo)
          aside.notes.
            Descriptors works only if they were stored in class __dict__
        section
          h1 Django
        section
          h2 Model excetptions
          pre
            code.hljs.python.
              try:
                  Entry.objects.get(id='foo')
              except Entry.DoesNotExist:
                  pass
          aside.notes
            | Normal classes does not have
            ul
              li Exception in their attributes
              li Why we catch exception for sertain model?
        section
          h2 Metaclasses
          pre
            code.hljs.python.
              class ModelBase(type):
                  """
                  Metaclass for all models.
                  """
                  def __new__(cls, name, bases, attrs):
                      new_class = type(cls, name, bases, {
                          '__module__': module,
                      })
                      ...
                      return new_class
        section
          h2 class factories
          pre
            code.hljs.python.
              class Entry(models.Model):
                  field1 = models.CharField()
                  field2 = models.IntegerField()

              Entry = ModelBase('Entry', (models.Model,), {
                  'field1': models.CharField(),
                  'field2': models.IntegerField(),
              })
        section
          h2 Introduce model exceptions
          pre
            code.hljs.python.
              if not abstract:
                  new_class.add_to_class(
                      'DoesNotExist',
                      subclass_exception(
                          str('DoesNotExist'),
                          (ObjectDoesNotExist,),
                          module,
                          attached_to=new_class))
        section
          h1 Sly
        section
          h2 Lexer
          pre
            code.hljs.python.
              from sly import Lexer

              class CalcLexer(Lexer):
                  @_(r'\d+')
                  def NUMBER(self, t):
                      t.value = int(t.value)
                      return t
        section
          h2 Normal class
          pre
            code.hljs.python.
              Traceback (most recent call last):
                File "name_error_sly.py", line 6, in #{"<module>"}
                  class CalcLexer(Lexer):
                File "name_error_sly.py", line 7, in CalcLexer
                  @_(r'\d+')
              NameError: name '_' is not defined
        section
          h2 Unbelievable
          pre
            code.hljs.python.
              class LexerType(type):
                  @staticmethod
                  def __prepare__(cls, *args, **kwargs):
                      def _(pattern): ...
                      d = {'_': _}
                      return d

              class Lexer(metaclass=LexerType):
                  pass
        section
          h1 Ruby
        section
          h2 String interpolation
          pre
            code.hljs.ruby.
              apples = 4
              puts "I have \#{apples} apples"
        section
          h2 Python can do that
          pre
            code.hljs.python.
              # coding: interpy
              apples = 4
              print('I have \#{apples} apples')
        section
          h1 React
        section
          h2 HTML inside JS? Why not
          pre
            code.hljs.js.
              render: function () {
                return (
                  #{"<"}div className="comment"#{">"}
                    #{"<"}h2 className="commentAuthor"#{">"}
                      {this.props.author}
                    #{"<"}/h2#{">"}
                    {this.props.children}
                  #{"<"}/div#{">"}
                );
              }
        section
          h2 Yep, in Python too
          pre
            code.hljs.python.
              # coding: pyxl
              def render(self):
                  return (
                      #{"<"}div class="comment"#{">"}
                          #{"<"}h2 class="commentAuthor"#{">"}
                              {self.author.name}
                          #{"<"}/h2#{">"}
                          {self.children()}
                      #{"<"}/div#{">"})
        section
          h2 Why? Why? Why?
          pre
            code.hljs.python.
              def search_function(encoding):
                  return codecs.CodecInfo(
                      name = 'interpy',
                      ...
                  )

              codecs.register(search_function)
    script(src='lib/js/head.min.js')
    script(src='js/reveal.js')
    script.
      Reveal.initialize({
          controls: false,
          progress: false,
          history: true,
          dependencies: [
              { src: 'plugin/notes/notes.js', async: true },
              { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
          ]
      });
