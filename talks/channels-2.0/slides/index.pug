doctype html
html
  head
    meta(charset="utf-8")
    title Channels 2.0
    meta(name="description" content="Django Channels 2.0 in depth overview")
    meta(name="author" content="Artem Malyshev")
    meta(name="apple-mobile-web-app-capable" content="yes")
    meta(name="apple-mobile-web-app-status-bar-style" content="black-translucent")
    meta(name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    link(rel="stylesheet" href="css/reveal.css")
    link(rel="stylesheet" href="css/theme/beige.css" id="theme")
    link(rel="stylesheet" href="lib/css/zenburn.css")
    script.
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    <!--[if lt IE 9]>
    script(src='lib/js/html5shiv.js')
    <![endif]-->
    style.
      .reveal section img {
          border: none;
          box-shadow: none;
      }

      .reveal section pre {
          box-shadow: none;
      }
  body
    .reveal
      .slides
        section
          h1 Channels 2.0
          h2 Artem Malyshev
          h3 @proofit404
        section
          h3 Channels 1.0
          p.fragment 3 years old design
          p.fragment no standard interface like WSGI
          p.fragment push #[i #[b everything]] over network
          p.fragment tricky deploy
          p.fragment django session abuse
        section
          h3 3 years of experience
          p 800+ commits
          p 450+ issues closed
          p 100+ contributors
          p 40+ releases
          aside.notes
            p Official django project
        section
          h3 No standard interface
          a(href="https://www.python.org/dev/peps/pep-0333/") PEP 333
          p This wide variety of choices can be a problem for new Python users, because generally speaking, their choice of web framework will limit their choice of usable web servers, and vice versa.
          aside.notes
            p Gunicorn -> Middlewares -> Django
            p Multiplexer logic needs to be implemented everywhere
        section
          h3 Push everything over network
          blockquote
            p TBH, the main reason I like microservices is that I feel like my method calls are too fast and Iâ€™d prefer to throw in some latency.
            p Aaron Patterson (@tenderlove)
            a(href="https://twitter.com/tenderlove/status/573907559871971328?ref_src=twsrc%5Etfw") March 6, 2015
          aside.notes
            p Tonns of handshaking request response traffic
            p Scaling issues
            p Redis local channel layer
        section
          h3 Tricky deploy
          img(src="pic/messy.png")
        section
          h3 Tricky deploy
          img(src="pic/deploy1.png")
          aside.notes
            p hello world
        section
          h3 Tricky deploy
          img(src="pic/deploy2.png")
          aside.notes
            p backpressure / channels full issue
            p hardly managed throughput
            p minimum configuration is too complex
        section
          h3 Session usage
          pre.fragment
            code.hljs.python.
              @channel_session
          pre.fragment
            code.hljs.python.
              @http_session
          pre.fragment
            code.hljs.python.
              @channel_and_http_session
          pre.fragment
            code.hljs.python.
              @channel_and_http_session_user_from_http
          pre.fragment
            code.hljs.python.
              @enforce_ordering
          aside.notes
            p Latency
            p Single point of failure
            p Scaling issues
            p Used as distributed Lock
        section
          h3 Groups issues
          p.fragment Used wrong mostly
          p.fragment Exposed to user
          p.fragment Too complex to be fully implemented
          aside.notes
            p People want to check membership
            p Not used for broadcasting
            p Membership discard on last add time and message expiration
        section
          h3 asgi redis issues
          p.fragment Incumplete groups support
          p.fragment Daphne constanty pools redis
          p.fragment Does not support transparrent scale
          aside.notes
            p WS cleanup mechanics does not work
            p People get costs on AWS
            p Consistent hash issues
        section
          h3 asgi rabbitmq issue
          p.fragment Have #[i #[b really]] complex implementation
          p.fragment Needs #[i #[b really]] careful production setup
          p.fragment But fully compatible with ASGI spec
          aside.notes
            p two eventloops in different threads
            p lock management in the thread unsafe library
            p production checklist is huge
        section
          h3 Channels 1.0
          p Too complex to show incomming message counter
          img(src="pic/envelop.png" style="height: 100px; width: 100px;")
        section
          h3 ASGI Application
          pre
            code.hljs.python.
              application = ProtocolTypeRouter({
                  "http": URLRouter([
                      url("^", DjangoViewSystem),
                  ]),
                  "websocket": URLRouter([
                      url("^chat/$", AsyncChatConsumer),
                  ]),
                  "mqtt": MqttTemperatureConsumer,
                  "email": EmailToRouter([
                      regex("@support.org", SupportTicketHandler),
                  ]),
                  "sms": SMSFromRouter([
                      phone("+1", USTextHandler),
                  ]),
              })
        section
          h3 Links
          a(href="http://channels.readthedocs.io/en/2.0/") Channels 2.0 Docs
          br
          a(href="http://www.aeracode.org/2017/07/11/towards-channels-20/") Towards Channels 2.0
          br
          a(href="http://www.aeracode.org/2017/10/18/channels-2-october/") Channels 2: October
          br
          a(href="http://www.uvicorn.org/") Uvicorn: The lightning-fast asyncio server.
        section
          h3 To be continued
    script(src="lib/js/head.min.js")
    script(src="js/reveal.js")
    script.
      Reveal.initialize({
          controls: false,
          progress: false,
          slideNumber: true,
          history: true,
          center: true,
          transition: 'none',
          dependencies: [
              { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
              { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
              { src: 'plugin/notes/notes.js', async: true }
          ]
      });
//- Local Variables:
//- eval: (add-hook (quote after-save-hook) (function (lambda nil (let ((proc (start-process-shell-command "pug" "*Pug*" (format "pug %s" (buffer-file-name))))) (set-process-sentinel proc (function (lambda (proc status) (and (buffer-file-name) (message "Pug: rendered %s" (file-name-nondirectory (buffer-file-name)))))))))) nil t)
//- End:
